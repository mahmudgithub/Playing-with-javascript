//ইফি, Immediately Invoked Function Expressions (IIFE)****************************
// //আমাদের সাধারনত কোনো ফাংশন বানানোর পর পরে সেটাকে কল করে ইউজ করতে হয়।
// // কিন্তু যদি আমরা ফাংশন বানানোর সাথে সাথেই সেটাকে কল করতে চাই সেক্ষেত্রে 
// //আমরা ইফি Immediately Invoked Function Expressions (IIFE) টেকনিক ইউজ করতে পারি।


// জাভাস্ক্রিপ্ট এ আমরা ফাংশন ক্রিয়েট করতে পারি কয়েকভাবেঃ**********************
// function fn(){console.log('hello1');};fn()
// //or
// var lol1=function(){console.log('hello2');};lol1()
// //or
// fn2=()=>{console.log('hello3');};fn2()
// //or
// var lol2=()=>{console.log('hello4');};lol2()
// //or
// var lol3=fn=>{console.log('hello5');};lol3()
// //কিন্তু যেভাবেই ফাংশন ক্রিয়েট করি না কেন, আমাদের সেটা ইউজ করতে হলে অবশ্যই ডাকতে হবে।
// //কিন্তু আমরা যদি চাই ফাংশন ক্রিয়েট করার সাথে সাথেই সেটা কল করতে তাহলে আমরা সেক্ষেত্রে ইফি ইউজ করতে পারি।



//effe:***********************
// //ইফি তে সাধারণত পুরো ফাংশনটাকে প্রথম ব্র্যাকেটস এর ভিতরে রাখতে হয় এবং সবশেষে আরো দুইটা আর্গুমেন্ট 
// //ব্র্যাকেটস দিয়ে কল করতে হয়।
// //es5 style
// (function fn(){
//     console.log('hello');
// })()
// //es6 style
// var pop=(fn=()=>{console.log('hello1');})()
// //এখানে পুরো ফাংশনটা প্রথম ব্র্যাকেটস এর ভিতরে চলে যাবে। এবং সবশেষে আরো দুইটা ব্র্যাকেটস হবে
// // যেখানে যদি উক্ত ফাংশনের কোনো আর্গুমেন্ট থাকে তাহলে পাস করতে পারবেন।



// //সেইমভাবে ফাংশন এক্সপ্রেশন এর ক্ষেত্রেও কাজ করবে। তবে এক্ষেত্রে ফাংশন থেকে রিটার্নকৃত 
// //ভ্যালু উক্ত ভ্যারিয়েবলটায় স্টোর হয়ে যাবে ইমিডিয়েটলি।
// var lol=(function(){console.log('ho');})()
//or
// var lol=(function(){return 20+10})();console.log(lol);



//why effe*************************
// //যেহেতু এখানে পুরোটা ফাংশন প্রথম ব্র্যাকেটস এর ভিতরে থাকে, তাই এখানে পুরোটা ফাংশন স্টেটমেন্ট না বরং 
// //এক্সপ্রেশন হিসাবে গণ্য হবে।
// //এটা দিয়ে আপনি প্রাইভেট ফাংশন ক্রিয়েট করতে পারবেন। এই ফাংশন বাইরে কোথাও ইউজ করতে পারবেন না।
// // না পারবেন এর ভিতরের কিছু ইউজ করতে। সো প্রাইভেসি মেইন্টেইন করতে চাইলে বা আপনি যদি চান কোনো 
// //ফাংশনের ভিতরের ডাটা বাইরে এক্সপোজ না করতে তাইলে এটা খুব ভালো একটা ইউসেজ হতে পারে
// //এটা যেমন সাথে সাথে কন্সোলে উক্ত লেখা প্রিন্ট করে ফেলবে, কিন্তু আপনি পরে যদি কোথাও aDemoFunc()কল করেন, এটা কাজ করবে না।
// // lol() //not ouput

// // ফাংশনের আসল কাজ হচ্ছে একটা নির্দিষ্ট সমস্যার সমাধান করা। আমরা যখন বড় প্রোজেক্ট তৈরী করি,
// //  তখন যতটুকু সম্ভব পুরো প্রোজেক্টটাকে মডুলার করার চেষ্টা করি। একেকটা কাজের জন্যে একেকটা ফাংশন তৈরী করি। 
// //  ধরি একটা জাভাস্ক্রিপ্ট এর গেইম এ আপনার পয়েন্ট গণনার জন্যে একটা ফাংশন থাকবে,
// //   আরেকটা থাকবে গেইম কন্ট্রোলের জন্যে, আরেকটা থাকতে পারে ইউজার ইন্টারফেজের পরিবর্তনের জন্যে।
// //    তো এভাবে একেকটা কাজের জন্যে একেকটা ফাংশন ইউজ করলে পুরো প্রোজেক্ট এর স্ট্রাকচার 
// //    যেমন সুন্দর হবে তেমনি কোনো বাগ খুজে পেতে বা ভবিষ্যৎ ডেভেলপারদের জন্যেও কোডিং স্ট্রাকচার 
// //    বুঝতে সমস্যা হবে না। আরেকটা সমস্যা আমাদের যেটা খুব বেশী হয়। আমরা অনেকগুলো ভ্যারিয়েবল 
// //    নিয়ে নিতে একটা সময় দেখি পার্ফেক্ট নাম খুজে পাই না। হয়তো এই নাম আগে ইউজ করা হয়েছে সেইম
// //     প্রোগ্রামের কোনো অংশে বা অন্যরকম নাম দিলে বুঝতে সমস্যা হয়ে যেতে পারে পরবর্তিতে।
// //      তো সেক্ষেত্রে এইরকম প্রাইভেট ফাংশন ক্রিয়েট করে নিলে আপনি একই নামে ভ্যারিয়েবল 
// //      পৃথক পৃথক ফাংশনে ইউজ করতে পারবেন যেহেতু এরা সম্পূর্ন প্রাইভেট। সেক্ষেত্রে আপনার 
// //      জন্যে আরো সিমেন্টিক কোড লিখা সম্ভব হবে।
// // মডুলার প্রোগ্রামিং এ আপনি প্রাইভেট ফাংশন থেকে কিছু ভ্যালু পেতে চাইলে ফাংশন এক্সপ্রেশন ইউজ করতে পারেন 
// // এবং সেই ফাংশন থেকে ভ্যালু অবজেক্ট বা অ্যারে আকারে রিটার্ন করে দিতে পারেন। তাইলে সেটা পরবর্তিতে বাইরেও 
// // ইউজ করতে পারবেন।
// var lol = (function() {
//     var a = {name: 'mahmud',id: 123};
//     return a;
//  })();
//  console.log(lol);
//  //এখানে controllerএ একটা অবজেক্ট স্টোর হয়েছে যেটা প্রাইভেট ফাংশনের ভিতর থেকে রিটার্ন করা হয়েছে।
// //এভাবে আপনার কাজ শেষে যেকোনো কিছু রিটার্ন করতে পারবেন যেটা আপনি পরবর্তিতে বাইরেও ইউজ করতে পারবেন।

// var pol = (function() {
//     return 'Hello ' + lol.name;   
//  })();
//  console.log(pol);
// //তো এভাবেই আপনি আপনার পুরো প্রোজেক্টটিকে মডুলার করতে পারবেন।
// // একটা ফাংশন থেকে ডাটা আরেকটা ফাংশনে নিতে পারবেন। আরো সিমেন্টিক,
// // গুড প্র্যাক্টিস ওয়ালা প্রোগ্রামিং করতে পারবেন।



//advancr invock function**********************************
//link: https://js.zonayed.me/es6/post-2 
// //প্রাইভেসি মেইন্টেইন করতে চাইলে বা আপনি যদি চান কোনো ফাংশনের ভিতরের
// // ডাটা বাইরে এক্সপোজ করতে না চান তাইলে ইফি খুব ভালোভাবে কাজে লাগতে পারে।
// const vari=(lol=()=>{
//     var names='mahmud';
//     console.log(names);
// })()
// //এটা সরাসরিই আউটপুট দিবেঃ
// //এখন এর বাইরে যদি এই ফাংশনটাকে আবার কল করতে চাই তাহলে এটা এরর দেখাবেঃ
// vari();
// //সেইমভাবে যদি আমরা ভ্যারিয়েবল msgটাকেও অ্যাক্সেস করতে চাই, সেটাও অসম্ভবঃ
// console.log(names);
// //ইফি ইউজ করে এরকমভাবেই প্রাইভেট ফাংশন এবং সেই সাথে প্রাইভেট ভ্যারিয়েবল ক্রিয়েট করা যায়।



// //কিন্তু ইএস ৬ এ letবা constব্লক লেভেলের স্কোপিং হওয়াতে ব্যাপারটা আরো অনেক সোজা হয়ে গিয়েছে। 
// //আমরা কোনো প্রাইভেট ফাংশন বা ভ্যারিয়েবল ক্রিয়েট করতে চাইলে জাস্ট সেটাকে letবা constদিয়ে ডিক্লেয়ার করে
// // সেটাকে এই ব্র্যাকেটস{}এর ভিতরে রেখে দিলেই এরা প্রাইভেট হয়ে যাবে। এদেরকে বাইরে থেকে অ্যাক্সেস করা যাবে নাঃ
// //এরা ঠিকঠাক মতো আউটপুট দেখাবেঃ
// {
//     let a = 5;
//     let b = 10;
//     const pi = 3.1416;
//     console.log(a + b + pi);
//  }
// //কিন্তু এখন যদি আমরা এই ভ্যারিয়েবলগুলোকে এই {}ব্র্যাকেটসগুলোর বাইরে থেকে অ্যাক্সেস করতে চাই তাহলে এরর আসবেঃ
// // console.log(a+b+pi);
// //সেইমভাবে ফাংশনের ক্ষেত্রেও। আমরা যদি varদিয়ে ডিক্লেয়ার করে ফাংশন এক্সপ্রেশন নেই তাহলে সেটার স্কোপ varএর 
// //স্কোপ মতেই হবে। এই ফাংশনকে এই{}ব্র্যাকেটস এর ভিতরে রাখার পরও দেখবেন বাইরে থেকে অ্যাক্সেস করা যাচ্ছেঃ
// {var myName = function() {
//     var a = 'mahmud';
//     console.log(a);
//    }}
// myName();
// //কিন্তু সেইম ফাংশনটাকেই যদি আমরা letবা constদিয়ে ডিক্ল্যেয়ার করে নেই,
// // তাহলে সেটা প্রাইভেট ফাংশন হয়ে যাবে ব্লক স্কোপিং এর কারনেঃ
// {const myName = function() {
//     const a = 'mahmud';
//     console.log(a);
//    }}
   
//    myName();
